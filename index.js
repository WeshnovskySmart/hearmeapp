// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
const express = require("express");
const http = require("http");
const WebSocket = require("ws");
const { v4: uuidv4 } = require("uuid");

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤–µ—Ä
const port = process.env.PORT || 3000;
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// –°—Ç–≤–æ—Ä—é—î–º–æ "–∫—ñ–º–Ω–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è"
const waitingUsers = {
    voice: [],
    text: [],
};

// –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤
const activeChats = {};

// –ë–∞–∑–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø—Ä–∞—Ü—é—î —Å–µ—Ä–≤–µ—Ä
app.get("/", (req, res) => {
    res.send("–°–µ—Ä–≤–µ—Ä HearMe –ø—Ä–∞—Ü—é—î!");
});

// –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞, —è–∫–∞ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—Ä–∏ –Ω–æ–≤–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
wss.on("connection", (ws) => {
    ws.id = uuidv4();
    console.log(`[Connect] ‚úÖ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${ws.id}`);

    ws.send(
        JSON.stringify({
            type: "welcome_message",
            content: "–í—ñ—Ç–∞—î–º–æ —É HearMe! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—å –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
        }),
    );

    ws.on("message", (message) => {
        try {
            const data = JSON.parse(message);
            console.log(`[Message] üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ ${ws.id}:`, data);

            switch (data.type) {
                case "start_search":
                    handleStartSearch(ws, data.mode);
                    break;
                case "cancel_search":
                    removeFromWaiting(ws);
                    break;
                case "text_message":
                    handleTextMessage(ws, data.content);
                    break;
                case "end_chat":
                    handleEndChat(ws);
                    break;
            }
        } catch (error) {
            console.error("[Error] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
        }
    });

    ws.on("close", () => {
        console.log(`[Disconnect] üîå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ws.id} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`);
        handleDisconnection(ws);
    });
});

function handleStartSearch(user, mode) {
    if (!user || user.readyState !== WebSocket.OPEN) return;
    if (!waitingUsers[mode])
        return console.error(`[Error] –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É: ${mode}`);
    console.log(`[Search] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.id} —à—É–∫–∞—î '${mode}' —á–∞—Ç.`);

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —á–µ—Ä–≥
    removeFromWaiting(user);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ö—Ç–æ—Å—å —É —á–µ—Ä–∑—ñ
    if (waitingUsers[mode].length > 0) {
        // –Ñ! –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–µ—Ä–≥–∏
        const partner = waitingUsers[mode].shift(); // .shift() –¥—ñ—Å—Ç–∞—î —ñ –≤–∏–¥–∞–ª—è—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–∞—Ä—Ç–Ω–µ—Ä —â–µ –Ω–∞ –∑–≤'—è–∑–∫—É
        if (!partner || partner.readyState !== WebSocket.OPEN) {
            console.log(
                `[Ghost] –ó–Ω–∞–π–¥–µ–Ω–æ "–ø—Ä–∏–≤–∏–¥–∞" —É —á–µ—Ä–∑—ñ. –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –ø–æ—à—É–∫ –¥–ª—è ${user.id}`,
            );
            // –ü–∞—Ä—Ç–Ω–µ—Ä –≤—ñ–¥'—î–¥–Ω–∞–≤—Å—è, –ø–æ–∫–∏ —á–µ–∫–∞–≤. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ —Ä–∞–∑.
            handleStartSearch(user, mode);
            return;
        }

        console.log(`[Match] üéâ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É! ${user.id} —Ç–∞ ${partner.id}.`);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–ª—è –Ω–∏—Ö —á–∞—Ç
        const chatId = uuidv4();
        user.chatId = chatId;
        partner.chatId = chatId;
        activeChats[chatId] = { user1: user, user2: partner };
        console.log(`[Chat] –°—Ç–≤–æ—Ä–µ–Ω–æ —á–∞—Ç ${chatId}.`);

        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –æ–±–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const message = JSON.stringify({ type: "partner_found" });

        console.log(`[Notify] –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ ${user.id}...`);
        user.send(message);

        console.log(`[Notify] –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ ${partner.id}...`);
        partner.send(message);
    } else {
        // –Ø–∫—â–æ –Ω—ñ–∫–æ–≥–æ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —á–µ—Ä–≥—É
        waitingUsers[mode].push(user);
        console.log(
            `[Queue] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.id} –¥–æ–¥–∞–Ω–∏–π —É —á–µ—Ä–≥—É '${mode}'. –ü–æ—Ç–æ—á–Ω–∞ —á–µ—Ä–≥–∞: ${waitingUsers[mode].length}`,
        );
    }
}

function handleTextMessage(sender, content) {
    const chatId = sender.chatId;
    if (!chatId || !activeChats[chatId]) return;

    const chat = activeChats[chatId];
    const receiver = chat.user1.id === sender.id ? chat.user2 : chat.user1;

    if (receiver && receiver.readyState === WebSocket.OPEN) {
        receiver.send(
            JSON.stringify({ type: "text_message", content: content }),
        );
    }
}

function cleanupChat(chatId) {
    if (activeChats[chatId]) {
        const chat = activeChats[chatId];
        if (chat.user1) chat.user1.chatId = null;
        if (chat.user2) chat.user2.chatId = null;
        delete activeChats[chatId];
        console.log(`[Chat] üßπ –ß–∞—Ç ${chatId} –≤–∏–¥–∞–ª–µ–Ω–æ.`);
    }
}

function handleEndChat(user) {
    const chatId = user.chatId;
    if (!chatId || !activeChats[chatId]) return;

    const chat = activeChats[chatId];
    const partner = chat.user1.id === user.id ? chat.user2 : chat.user1;

    if (partner && partner.readyState === WebSocket.OPEN) {
        partner.send(JSON.stringify({ type: "partner_disconnected" }));
    }

    cleanupChat(chatId);
}

function removeFromWaiting(user) {
    if (!user) return;
    Object.keys(waitingUsers).forEach((mode) => {
        const initialLength = waitingUsers[mode].length;
        waitingUsers[mode] = waitingUsers[mode].filter((p) => p.id !== user.id);
        if (waitingUsers[mode].length < initialLength) {
            console.log(
                `[Queue] üö∂‚Äç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —á–µ—Ä–≥–∏ "${mode}"`,
            );
        }
    });
}

function handleDisconnection(user) {
    removeFromWaiting(user);
    handleEndChat(user);
}

server.listen(port, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${port}`);
});
