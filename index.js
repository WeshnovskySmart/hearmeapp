// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
const express = require("express");
const http = require("http");
const WebSocket = require("ws");
const { v4: uuidv4 } = require("uuid"); // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö ID

// –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–≤–µ—Ä
const port = process.env.PORT || 3000;
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// –°—Ç–≤–æ—Ä—é—î–º–æ "–∫—ñ–º–Ω–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è"
const waitingUsers = {
    voice: [],
    text: [],
};

// –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤
const activeChats = {};

// –ë–∞–∑–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø—Ä–∞—Ü—é—î —Å–µ—Ä–≤–µ—Ä
app.get("/", (req, res) => {
    res.send("–°–µ—Ä–≤–µ—Ä HearMe –ø—Ä–∞—Ü—é—î!");
});

// –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞, —è–∫–∞ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—Ä–∏ –Ω–æ–≤–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
wss.on("connection", (ws) => {
    ws.id = uuidv4();
    console.log(`‚úÖ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${ws.id}`);

    ws.send(
        JSON.stringify({
            type: "welcome_message",
            content: "–í—ñ—Ç–∞—î–º–æ —É HearMe! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—å –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
        }),
    );

    ws.on("message", (message) => {
        try {
            const data = JSON.parse(message);
            console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${ws.id}:`, data);

            switch (data.type) {
                case "start_search":
                    handleStartSearch(ws, data.mode);
                    break;

                case "text_message":
                    handleTextMessage(ws, data.content);
                    break;

                case "end_chat":
                    handleEndChat(ws);
                    break;
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
        }
    });

    ws.on("close", () => {
        console.log(`üîå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ws.id} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.`);
        handleDisconnection(ws);
    });
});

function handleStartSearch(user, mode) {
    if (!waitingUsers[mode]) {
        console.error(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É: ${mode}`);
        return;
    }

    // –û—á–∏—â—É—î–º–æ "–ø—Ä–∏–≤–∏–¥—ñ–≤" –∑ —á–µ—Ä–≥–∏
    waitingUsers[mode] = waitingUsers[mode].filter(
        (p) => p.readyState === WebSocket.OPEN,
    );

    const waitingPartner = waitingUsers[mode].find((p) => p.id !== user.id);

    if (waitingPartner) {
        console.log(
            `üéâ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É! ${user.id} —Ç–∞ ${waitingPartner.id} —É —Ä–µ–∂–∏–º—ñ "${mode}"`,
        );

        waitingUsers[mode] = waitingUsers[mode].filter(
            (p) => p.id !== waitingPartner.id,
        );

        const chatId = uuidv4();
        activeChats[chatId] = [user, waitingPartner];
        user.chatId = chatId;
        waitingPartner.chatId = chatId;

        user.send(JSON.stringify({ type: "partner_found" }));
        waitingPartner.send(JSON.stringify({ type: "partner_found" }));
    } else {
        console.log(`‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.id} –¥–æ–¥–∞–Ω–∏–π —É —á–µ—Ä–≥—É "${mode}"`);
        Object.keys(waitingUsers).forEach((key) => {
            waitingUsers[key] = waitingUsers[key].filter(
                (u) => u.id !== user.id,
            );
        });
        waitingUsers[mode].push(user);
    }
}

function handleTextMessage(sender, content) {
    const chatId = sender.chatId;
    if (!chatId || !activeChats[chatId]) return;

    const receiver = activeChats[chatId].find((p) => p.id !== sender.id);

    if (receiver && receiver.readyState === WebSocket.OPEN) {
        receiver.send(
            JSON.stringify({
                type: "text_message",
                content: content,
            }),
        );
    }
}

function cleanupChat(chatId) {
    if (activeChats[chatId]) {
        activeChats[chatId].forEach((user) => {
            if (user) user.chatId = null;
        });
        delete activeChats[chatId];
        console.log(`üßπ –ß–∞—Ç ${chatId} –≤–∏–¥–∞–ª–µ–Ω–æ.`);
    }
}

function handleEndChat(user) {
    const chatId = user.chatId;
    if (!chatId || !activeChats[chatId]) return;

    const partner = activeChats[chatId].find((p) => p.id !== user.id);

    if (partner && partner.readyState === WebSocket.OPEN) {
        partner.send(JSON.stringify({ type: "partner_disconnected" }));
    }

    cleanupChat(chatId);
}

function handleDisconnection(user) {
    // 1. –í–∏–¥–∞–ª—è—î–º–æ –∑ —á–µ—Ä–≥–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    Object.keys(waitingUsers).forEach((mode) => {
        waitingUsers[mode] = waitingUsers[mode].filter((p) => p.id !== user.id);
    });

    // 2. –ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    handleEndChat(user);
}

server.listen(port, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${port}`);
});
